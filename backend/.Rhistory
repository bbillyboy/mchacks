auth <- authenticate(Sys.getenv("GITHUB_PAT"), "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")
# Seperate the filename from the directory
match <- regexpr("^(.*[\\/])", path)
if (match[1] > 0) {
dir <- path %>% substring(match[1], attr(match, "match.length"))
file <- path %>% substring(attr(match, "match.length") + 1, nchar(path))
} else {
dir <- ""
file <- path
}
# To handle files larger than 1MB, use this trick:
# https://medium.com/@caludio/how-to-download-large-files-from-github-4863a2dbba3b
req_meta <-
content(
GET(
paste("https://api.github.com/repos", gh_account, repo, "contents", dir, sep="/"),
auth
)
)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
# Grab contents, using sha as a reference
req_blob <- GET(
paste("https://api.github.com/repos", gh_account, repo, "git/blobs", sha, sep="/"),
auth
)
# Need to decode the contents, which are returned in base64
d <- content(req_blob)$content %>%
base64_dec() %>%
rawToChar()
return(d)
}
#Select file to load into R environment
github_repo = "gut-microbiota-iron"
file = "adult_dss_weight_measurement.csv"
#Transforming the data into a data.frame usable by R
gh_data <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = "\t")
#loading libraries
library("tidyverse")
library("ggplot2")
library("dplyr")
library("readr")
library("httr")
weight_measure_file <- gh_data
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
#setting the diet column data into a string format so that it can be used into ggplot
weight_measure_file$Diet..Fe.ppm. = as.character(weight_measure_file$Diet..Fe.ppm.)
#using this enables to verify is a variable is of type "date"
str(weight_measure_file)
#replacing abnormal values
weight_measure_file$weight[5] = 24.2
weight_measure_file$weight[29] = 23.1
#creating 4 groups for easier graphic interpretations
for(i in c(1:length(weight_measure_file$arbitrary.number))){
if(any(weight_measure_file$arbitrary.number[i] %in% c(1,3,5))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(2,4,6))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + water"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(7,9,11))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(8,10,12))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + water"
}
}
#creating scatter plot with the four different treatments (diet combined with dss or control)
di <- as.data.frame(weight_measure_file)
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_line(stat = "summary", fun = "mean", aes(group = group)) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
#creating scatter plot with the four different treatments (diet combined with dss or control)
di <- as.data.frame(weight_measure_file)
di %>%
ggplot(aes(x = date, y = weight, color = date))+
geom_line(stat = "summary", fun = "mean", aes(group = date)) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = date))+
geom_line(stat = "summary", fun = "mean", aes(group = weight)) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = date))+
geom_line(stat = "summary", fun = "mean", aes(group = group)) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_line(stat = "summary", fun = "mean", aes(group = group)) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
#creating scatter plot with the four different treatments (diet combined with dss or control)
di <- as.data.frame(weight_measure_file)
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat =  "summary", fun = "mean", aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
View(di)
#creating scatter plot with the four different treatments (diet combined with dss or control)
di <- as.data.frame(weight_measure_file)
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(1,30)
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(1:30)
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat =  "summary", fun = "mean", aes(color = group), size = 2)+
stat_summary(fun = mean, geom = "point", size = 3, shape = 17) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
di %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
stat_summary(fun = mean, geom = "point", size = 3) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(1,30)
#creating scatter plot with the four different treatments (diet combined with dss or control)
data <- as.data.frame(weight_measure_file)
aa <- data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()
aa+ylim(1,30)
#creating scatter plot with the four different treatments (diet combined with dss or control)
data <- as.data.frame(weight_measure_file)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
ylim(1,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
theme_minimal()
#setting the weight column data into a int format
weight_measure_file$weight <- as.numeric(weight_measure_file$weight)
View(weight_measure_file)
weight_measure_file <- gh_data
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
#setting the diet column data into a string format so that it can be used into ggplot
weight_measure_file$Diet..Fe.ppm. = as.character(weight_measure_file$Diet..Fe.ppm.)
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$weight))){
weight_measure_file$weight[i] <- gsub("\\,", ".", weight_measure_file$weight[i])
}
weight_measure_file$weight <- as.numeric(weight_measure_file$weight)
#using this enables to verify is a variable is of type "date"
str(weight_measure_file)
#replacing abnormal values
weight_measure_file$weight[5] = 24.2
weight_measure_file$weight[29] = 23.1
#creating 4 groups for easier graphic interpretations
for(i in c(1:length(weight_measure_file$arbitrary.number))){
if(any(weight_measure_file$arbitrary.number[i] %in% c(1,3,5))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(2,4,6))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + water"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(7,9,11))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(8,10,12))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + water"
}
}
#creating scatter plot with the four different treatments (diet combined with dss or control)
data <- as.data.frame(weight_measure_file)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
theme_minimal()
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
theme_minimal()+
ylim(1,30)
a = 12,5
# Dependencies
require(tidyverse)
require(httr)
require(rlist)
require(jsonlite)
Sys.setenv(GITHUB_PAT = "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")
# Your GitHub username or team account name
gh_account <- 'bioth'
# This function accepts two arguments — the name of the repo
# and the path to the file of interest from the main
# directory (including the filename)
fetchGHdata <- function(repo, path) {
# First you have to authenticate.
# Store a personal access token in .Renviron
# See https://blog.exploratory.io/extract-data-from-private-github-repository-with-rest-api-db804fa43d84
auth <- authenticate(Sys.getenv("GITHUB_PAT"), "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")
# Seperate the filename from the directory
match <- regexpr("^(.*[\\/])", path)
if (match[1] > 0) {
dir <- path %>% substring(match[1], attr(match, "match.length"))
file <- path %>% substring(attr(match, "match.length") + 1, nchar(path))
} else {
dir <- ""
file <- path
}
# To handle files larger than 1MB, use this trick:
# https://medium.com/@caludio/how-to-download-large-files-from-github-4863a2dbba3b
req_meta <-
content(
GET(
paste("https://api.github.com/repos", gh_account, repo, "contents", dir, sep="/"),
auth
)
)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
# Grab contents, using sha as a reference
req_blob <- GET(
paste("https://api.github.com/repos", gh_account, repo, "git/blobs", sha, sep="/"),
auth
)
# Need to decode the contents, which are returned in base64
d <- content(req_blob)$content %>%
base64_dec() %>%
rawToChar()
return(d)
}
#Select file to load into R environment
github_repo = "gut-microbiota-iron"
file = "adult_dss_weight_measurement.csv"
#Transforming the data into a data.frame usable by R
gh_data <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = "\t")
library("tidyverse")
library("ggplot2")
library("dplyr")
weight_measure_file <- gh_data
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
#setting the diet column data into a string format so that it can be used into ggplot
weight_measure_file$Diet..Fe.ppm. = as.character(weight_measure_file$Diet..Fe.ppm.)
#setting the weight column data into numeric values
for(i in c(1:length(weight_measure_file$weight))){
weight_measure_file$weight[i] <- gsub("\\,", ".", weight_measure_file$weight[i])
}
weight_measure_file$weight <- as.numeric(weight_measure_file$weight)
#using this enables to verify if date variable is of type "date" and weight of type numeric
str(weight_measure_file)
#replacing abnormal values
weight_measure_file$weight[5] = 24.2
weight_measure_file$weight[29] = 23.1
#creating 4 groups for easier graphic interpretations
for(i in c(1:length(weight_measure_file$arbitrary.number))){
if(any(weight_measure_file$arbitrary.number[i] %in% c(1,3,5))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(2,4,6))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + water"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(7,9,11))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(8,10,12))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + water"
}
}
#creating scatter plot with the four different treatments (diet combined with dss or control)
data <- as.data.frame(weight_measure_file)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
theme_minimal()+
ylim(1,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
stat_summary(fun ="mean")
#loading the dss followup sheet from github
github_repo <- "gut-microbiota-iron"
file <- "adult_mice_DSS1_followup.csv"
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = ",")
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = ";")
View(dss_followup)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(aes(color = group), size = 2)+
stat_summary(fun ="mean")+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)")+
theme_minimal()+
ylim(1,30)
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_wider(dss_followup,c(1), rows_vary = "slowest", names_to = "date", values_to = "weight")
# Dependencies
require(tidyverse)
require(httr)
require(rlist)
require(jsonlite)
Sys.setenv(GITHUB_PAT = "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")
# Your GitHub username or team account name
gh_account <- 'bioth'
# This function accepts two arguments — the name of the repo
# and the path to the file of interest from the main
# directory (including the filename)
fetchGHdata <- function(repo, path) {
# First you have to authenticate.
# Store a personal access token in .Renviron
# See https://blog.exploratory.io/extract-data-from-private-github-repository-with-rest-api-db804fa43d84
auth <- authenticate(Sys.getenv("GITHUB_PAT"), "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")
# Seperate the filename from the directory
match <- regexpr("^(.*[\\/])", path)
if (match[1] > 0) {
dir <- path %>% substring(match[1], attr(match, "match.length"))
file <- path %>% substring(attr(match, "match.length") + 1, nchar(path))
} else {
dir <- ""
file <- path
}
# To handle files larger than 1MB, use this trick:
# https://medium.com/@caludio/how-to-download-large-files-from-github-4863a2dbba3b
req_meta <-
content(
GET(
paste("https://api.github.com/repos", gh_account, repo, "contents", dir, sep="/"),
auth
)
)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
# Grab contents, using sha as a reference
req_blob <- GET(
paste("https://api.github.com/repos", gh_account, repo, "git/blobs", sha, sep="/"),
auth
)
# Need to decode the contents, which are returned in base64
d <- content(req_blob)$content %>%
base64_dec() %>%
rawToChar()
return(d)
}
#Select file to load into R environment
github_repo = "gut-microbiota-iron"
###DSS FOLLOW UP SHEET DATA
#loading the dss followup sheet from github
github_repo <- "gut-microbiota-iron"
file <- "adult_mice_DSS1_followup.csv"
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = ";")
View(dss_followup)
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = ",")
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = ";")
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = "\t")
#Select file to load into R environment
github_repo = "gut-microbiota-iron"
file = "adult_dss_weight_measurement.csv"
#Transforming the data into a data.frame usable by R
gh_data <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = "\t")
View(gh_data)
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_longer(dss_followup,c(5:22), rows_vary = "slowest", names_to = "date", values_to = c("a","b","c"))
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_longer(dss_followup,c(5:22), rows_vary = "slowest", names_to = "date", values_to = "a")
library("tidyverse")
library("ggplot2")
library("dplyr")
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_longer(dss_followup,c(5:22), rows_vary = "slowest", names_to = "date", values_to = "a")
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_longer(dss_followup,c(5:22), cols_vary = "slowest", names_to = "date", values_to = "a")
View(test)
#pivoting the top row with dates (Day0 Day1 ...) into a column using pivot_longer
test <- pivot_longer(dss_followup,c(5:22), cols_vary = "slowest", names_to = "date", values_to = c("a","b","c"))
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = FALSE, sep = "\t")
###DSS FOLLOW UP SHEET DATA
#loading the dss followup sheet from github
github_repo <- "gut-microbiota-iron"
file <- "adult_mice_DSS1_followup.csv"
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = FALSE, sep = "\t")
dss_followup <- read.table(text = fetchGHdata(github_repo,file), header = TRUE, sep = "\t")
unique_values <- unique(dss_followup[1, ])
View(unique_values)
rearranged_df <- dss_followup[, order(match(dss_followup[1, ], unique_values))]
View(rearranged_df)
test <- pivot_longer(rearranged_df,c(5:10),cols_vary = "slowest", names_to = "date",values_to = "weight")
file <- read.csv("businesses.csv")
setwd("D:/mchacks/montreat-2/montreat-22/mchacks/backend")
file <- read.csv("businesses.csv")
uniqueType <- unique(file$type)
print(uniqueType)
typesToKeep <- c("Organisme d'aide alimentaire")
filtered_df <- file[file$type %in% typesToKeep, ]
statut <- unique(file$statut)
print(statut)
statutToKeep <- c("Ouvert","En traitement")
filtered_df <- filtered_df[filtered_df$statut %in% statutToKeep, ]
source("D:/mchacks/montreat-2/montreat-22/mchacks/backend/selecting_businesses.R")
write.table(filtered_df, "selected_business.csv", row.names = FALSE, sep=",", quote = FALSE)
source("D:/mchacks/montreat-2/montreat-22/mchacks/backend/selecting_businesses.R")
file <- read.csv("businesses.csv")
uniqueType <- unique(file$type)
print(uniqueType)
typesToKeep <- c("Organisme d'aide alimentaire")
filtered_df <- file[file$type %in% typesToKeep, ]
statut <- unique(file$statut)
print(statut)
statutToKeep <- c("Ouvert","En traitement")
filtered_df <- filtered_df[filtered_df$statut %in% statutToKeep, ]
write.csv(filtered_df, "selected_business.csv", row.names = FALSE)
View(filtered_df)
View(file)
